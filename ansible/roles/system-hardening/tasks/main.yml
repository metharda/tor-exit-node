---
- name: Install essential packages
  apt:
    name:
      - ufw
      - fail2ban
      - unattended-upgrades
      - apt-listchanges
      - iptables-persistent
      - netfilter-persistent
      - curl
      - wget
      - htop
      - vim
      - net-tools
    state: present
    update_cache: true
  register: package_install
  until: package_install is succeeded
  retries: 5
  delay: 30

- name: Remove unnecessary packages
  apt:
    name:
      - snapd
      - whoopsie
      - ubuntu-report
      - popularity-contest
    state: absent
    purge: true
    autoremove: true
  register: package_remove
  until: package_remove is succeeded
  retries: 3
  delay: 10
  ignore_errors: true

- name: Configure automatic security updates
  copy:
    dest: /etc/apt/apt.conf.d/50unattended-upgrades
    content: |
      Unattended-Upgrade::Allowed-Origins {
          "${distro_id}:${distro_codename}-security";
          "${distro_id}ESMApps:${distro_codename}-apps-security";
          "${distro_id}ESM:${distro_codename}-infra-security";
      };
      Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
      Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
      Unattended-Upgrade::Remove-Unused-Dependencies "true";
      Unattended-Upgrade::Automatic-Reboot "false";
    mode: '0644'

- name: Enable automatic updates
  copy:
    dest: /etc/apt/apt.conf.d/20auto-upgrades
    content: |
      APT::Periodic::Update-Package-Lists "1";
      APT::Periodic::Unattended-Upgrade "1";
    mode: '0644'

- name: Ensure primary user exists
  user:
    name: "{{ ansible_user }}"
    groups: sudo
    shell: /bin/bash
    create_home: true
    state: present

- name: Configure sudo without password for deployment user
  lineinfile:
    dest: /etc/sudoers.d/90-{{ ansible_user }}
    line: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
    create: true
    mode: '0440'
    validate: 'visudo -cf %s'

- name: Harden SSH configuration
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    backup: true
    mode: '0644'
  notify: restart sshd

- name: Disable root login
  user:
    name: root
    password_lock: true

- name: Configure UFW default policies
  template:
    src: ufw-rules.sh.j2
    dest: /tmp/ufw-rules.sh
    mode: '0755'

- name: Apply UFW rules
  command: /tmp/ufw-rules.sh
  changed_when: false

- name: Enable UFW
  ufw:
    state: enabled
    policy: deny
    direction: incoming

- name: Configure fail2ban for SSH
  copy:
    dest: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 5
      
      [sshd]
      enabled = true
      port = 22
      filter = sshd
      logpath = /var/log/auth.log
      maxretry = 3
    mode: '0644'
  notify: restart fail2ban

- name: Disable IPv6
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: true
  loop:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6

- name: Enable kernel security features
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop:
    - { key: "net.ipv4.ip_forward", value: "1" }
    - { key: "net.ipv4.conf.all.forwarding", value: "1" }
    - { key: "net.ipv4.conf.all.send_redirects", value: "0" }
    - { key: "net.ipv4.conf.default.send_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.accept_redirects", value: "0" }
    - { key: "net.ipv4.conf.default.accept_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.secure_redirects", value: "0" }
    - { key: "net.ipv4.conf.default.secure_redirects", value: "0" }
    - { key: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
    - { key: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
    - { key: "net.ipv4.tcp_syncookies", value: "1" }
    - { key: "net.ipv4.conf.all.rp_filter", value: "2" }
    - { key: "net.ipv4.conf.default.rp_filter", value: "2" }

- name: Create systemd drop-in directory for hardening
  file:
    path: /etc/systemd/system/user@.service.d
    state: directory
    mode: '0755'

- name: Apply systemd sandboxing for user services
  copy:
    dest: /etc/systemd/system/user@.service.d/hardening.conf
    content: |
      [Service]
      PrivateDevices=yes
      ProtectSystem=strict
      ProtectHome=read-only
      ProtectKernelTunables=yes
      ProtectKernelModules=yes
      ProtectControlGroups=yes
      RestrictSUIDSGID=yes
      RemoveIPC=yes
      NoNewPrivileges=yes
    mode: '0644'

- name: Set file permissions on sensitive files
  file:
    path: "{{ item }}"
    mode: '0600'
  loop:
    - /etc/ssh/sshd_config
    - /etc/shadow
    - /etc/gshadow
  ignore_errors: true

- name: Enable and start essential services
  systemd:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - ufw
    - fail2ban
    - unattended-upgrades